// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_rpc_2eproto;
namespace taotu {
class GetServiceRequest;
struct GetServiceRequestDefaultTypeInternal;
extern GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
class GetServiceResponse;
struct GetServiceResponseDefaultTypeInternal;
extern GetServiceResponseDefaultTypeInternal _GetServiceResponse_default_instance_;
class ListRpcRequest;
struct ListRpcRequestDefaultTypeInternal;
extern ListRpcRequestDefaultTypeInternal _ListRpcRequest_default_instance_;
class ListRpcResponse;
struct ListRpcResponseDefaultTypeInternal;
extern ListRpcResponseDefaultTypeInternal _ListRpcResponse_default_instance_;
class RpcMessage;
struct RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace taotu
PROTOBUF_NAMESPACE_OPEN
template <>
::taotu::GetServiceRequest* Arena::CreateMaybeMessage<::taotu::GetServiceRequest>(Arena*);
template <>
::taotu::GetServiceResponse* Arena::CreateMaybeMessage<::taotu::GetServiceResponse>(Arena*);
template <>
::taotu::ListRpcRequest* Arena::CreateMaybeMessage<::taotu::ListRpcRequest>(Arena*);
template <>
::taotu::ListRpcResponse* Arena::CreateMaybeMessage<::taotu::ListRpcResponse>(Arena*);
template <>
::taotu::RpcMessage* Arena::CreateMaybeMessage<::taotu::RpcMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace taotu {
enum MessageType : int {
  OTHER = 0,
  REQUEST = 1,
  RESPONSE = 2,
  ERROR = 3,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(3);
constexpr int MessageType_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}
enum ErrorCode : int {
  NO_ERROR = 0,
  WRONG_PROTO = 1,
  NO_SERVICE = 2,
  NO_METHOD = 3,
  INVALID_REQUEST = 4,
  INVALID_RESPONSE = 5,
  TIMEOUT = 6,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = static_cast<ErrorCode>(0);
constexpr ErrorCode ErrorCode_MAX = static_cast<ErrorCode>(6);
constexpr int ErrorCode_ARRAYSIZE = 6 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ErrorCode_descriptor();
template <typename T>
const std::string& ErrorCode_Name(T value) {
  static_assert(std::is_same<T, ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return ErrorCode_Name(static_cast<ErrorCode>(value));
}
template <>
inline const std::string& ErrorCode_Name(ErrorCode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ErrorCode_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ErrorCode_Parse(absl::string_view name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
      ErrorCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RpcMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:taotu.RpcMessage) */ {
 public:
  inline RpcMessage() : RpcMessage(nullptr) {}
  ~RpcMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMessage(const RpcMessage& from);
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcMessage& from) {
    RpcMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "taotu.RpcMessage";
  }
  protected:
  explicit RpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 3,
    kMethodFieldNumber = 4,
    kRequestFieldNumber = 5,
    kResponseFieldNumber = 6,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
    kErrorFieldNumber = 7,
  };
  // optional string service = 3;
  bool has_service() const;
  void clear_service() ;
  const std::string& service() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service(Arg_&& arg, Args_... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* ptr);

  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
      const std::string& value);
  std::string* _internal_mutable_service();

  public:
  // optional string method = 4;
  bool has_method() const;
  void clear_method() ;
  const std::string& method() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* ptr);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // optional bytes request = 5;
  bool has_request() const;
  void clear_request() ;
  const std::string& request() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request(Arg_&& arg, Args_... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* ptr);

  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(
      const std::string& value);
  std::string* _internal_mutable_request();

  public:
  // optional bytes response = 6;
  bool has_response() const;
  void clear_response() ;
  const std::string& response() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response(Arg_&& arg, Args_... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* ptr);

  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(
      const std::string& value);
  std::string* _internal_mutable_response();

  public:
  // fixed64 id = 2;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .taotu.MessageType type = 1;
  void clear_type() ;
  ::taotu::MessageType type() const;
  void set_type(::taotu::MessageType value);

  private:
  ::taotu::MessageType _internal_type() const;
  void _internal_set_type(::taotu::MessageType value);

  public:
  // optional .taotu.ErrorCode error = 7;
  bool has_error() const;
  void clear_error() ;
  ::taotu::ErrorCode error() const;
  void set_error(::taotu::ErrorCode value);

  private:
  ::taotu::ErrorCode _internal_error() const;
  void _internal_set_error(::taotu::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:taotu.RpcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
    ::uint64_t id_;
    int type_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};// -------------------------------------------------------------------

class ListRpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:taotu.ListRpcRequest) */ {
 public:
  inline ListRpcRequest() : ListRpcRequest(nullptr) {}
  ~ListRpcRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListRpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRpcRequest(const ListRpcRequest& from);
  ListRpcRequest(ListRpcRequest&& from) noexcept
    : ListRpcRequest() {
    *this = ::std::move(from);
  }

  inline ListRpcRequest& operator=(const ListRpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpcRequest& operator=(ListRpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRpcRequest* internal_default_instance() {
    return reinterpret_cast<const ListRpcRequest*>(
               &_ListRpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListRpcRequest& a, ListRpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRpcRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRpcRequest& from) {
    ListRpcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "taotu.ListRpcRequest";
  }
  protected:
  explicit ListRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kListMethodFieldNumber = 2,
  };
  // optional string service_name = 1;
  bool has_service_name() const;
  void clear_service_name() ;
  const std::string& service_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* ptr);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // optional bool list_method = 2;
  bool has_list_method() const;
  void clear_list_method() ;
  bool list_method() const;
  void set_list_method(bool value);

  private:
  bool _internal_list_method() const;
  void _internal_set_list_method(bool value);

  public:
  // @@protoc_insertion_point(class_scope:taotu.ListRpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    bool list_method_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};// -------------------------------------------------------------------

class ListRpcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:taotu.ListRpcResponse) */ {
 public:
  inline ListRpcResponse() : ListRpcResponse(nullptr) {}
  ~ListRpcResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListRpcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRpcResponse(const ListRpcResponse& from);
  ListRpcResponse(ListRpcResponse&& from) noexcept
    : ListRpcResponse() {
    *this = ::std::move(from);
  }

  inline ListRpcResponse& operator=(const ListRpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpcResponse& operator=(ListRpcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRpcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRpcResponse* internal_default_instance() {
    return reinterpret_cast<const ListRpcResponse*>(
               &_ListRpcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListRpcResponse& a, ListRpcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRpcResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRpcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRpcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRpcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRpcResponse& from) {
    ListRpcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "taotu.ListRpcResponse";
  }
  protected:
  explicit ListRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kMethodNameFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // repeated string service_name = 2;
  int service_name_size() const;
  private:
  int _internal_service_name_size() const;

  public:
  void clear_service_name() ;
  const std::string& service_name(int index) const;
  std::string* mutable_service_name(int index);
  void set_service_name(int index, const std::string& value);
  void set_service_name(int index, std::string&& value);
  void set_service_name(int index, const char* value);
  void set_service_name(int index, const char* value, std::size_t size);
  void set_service_name(int index, absl::string_view value);
  std::string* add_service_name();
  void add_service_name(const std::string& value);
  void add_service_name(std::string&& value);
  void add_service_name(const char* value);
  void add_service_name(const char* value, std::size_t size);
  void add_service_name(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_name();

  private:
  const std::string& _internal_service_name(int index) const;
  std::string* _internal_add_service_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_service_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_service_name();

  public:
  // repeated string method_name = 3;
  int method_name_size() const;
  private:
  int _internal_method_name_size() const;

  public:
  void clear_method_name() ;
  const std::string& method_name(int index) const;
  std::string* mutable_method_name(int index);
  void set_method_name(int index, const std::string& value);
  void set_method_name(int index, std::string&& value);
  void set_method_name(int index, const char* value);
  void set_method_name(int index, const char* value, std::size_t size);
  void set_method_name(int index, absl::string_view value);
  std::string* add_method_name();
  void add_method_name(const std::string& value);
  void add_method_name(std::string&& value);
  void add_method_name(const char* value);
  void add_method_name(const char* value, std::size_t size);
  void add_method_name(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& method_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_method_name();

  private:
  const std::string& _internal_method_name(int index) const;
  std::string* _internal_add_method_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_method_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_method_name();

  public:
  // .taotu.ErrorCode error = 1;
  void clear_error() ;
  ::taotu::ErrorCode error() const;
  void set_error(::taotu::ErrorCode value);

  private:
  ::taotu::ErrorCode _internal_error() const;
  void _internal_set_error(::taotu::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:taotu.ListRpcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> method_name_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};// -------------------------------------------------------------------

class GetServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:taotu.GetServiceRequest) */ {
 public:
  inline GetServiceRequest() : GetServiceRequest(nullptr) {}
  ~GetServiceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceRequest(const GetServiceRequest& from);
  GetServiceRequest(GetServiceRequest&& from) noexcept
    : GetServiceRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceRequest& operator=(const GetServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceRequest& operator=(GetServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceRequest*>(
               &_GetServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServiceRequest& a, GetServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceRequest& from) {
    GetServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "taotu.GetServiceRequest";
  }
  protected:
  explicit GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // string service_name = 1;
  void clear_service_name() ;
  const std::string& service_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* ptr);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // @@protoc_insertion_point(class_scope:taotu.GetServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};// -------------------------------------------------------------------

class GetServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:taotu.GetServiceResponse) */ {
 public:
  inline GetServiceResponse() : GetServiceResponse(nullptr) {}
  ~GetServiceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceResponse(const GetServiceResponse& from);
  GetServiceResponse(GetServiceResponse&& from) noexcept
    : GetServiceResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceResponse& operator=(const GetServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceResponse& operator=(GetServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceResponse*>(
               &_GetServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetServiceResponse& a, GetServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceResponse& from) {
    GetServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "taotu.GetServiceResponse";
  }
  protected:
  explicit GetServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFileFieldNumber = 2,
    kProtoFileNameFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // repeated string proto_file = 2;
  int proto_file_size() const;
  private:
  int _internal_proto_file_size() const;

  public:
  void clear_proto_file() ;
  const std::string& proto_file(int index) const;
  std::string* mutable_proto_file(int index);
  void set_proto_file(int index, const std::string& value);
  void set_proto_file(int index, std::string&& value);
  void set_proto_file(int index, const char* value);
  void set_proto_file(int index, const char* value, std::size_t size);
  void set_proto_file(int index, absl::string_view value);
  std::string* add_proto_file();
  void add_proto_file(const std::string& value);
  void add_proto_file(std::string&& value);
  void add_proto_file(const char* value);
  void add_proto_file(const char* value, std::size_t size);
  void add_proto_file(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proto_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proto_file();

  private:
  const std::string& _internal_proto_file(int index) const;
  std::string* _internal_add_proto_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_proto_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_proto_file();

  public:
  // repeated string proto_file_name = 3;
  int proto_file_name_size() const;
  private:
  int _internal_proto_file_name_size() const;

  public:
  void clear_proto_file_name() ;
  const std::string& proto_file_name(int index) const;
  std::string* mutable_proto_file_name(int index);
  void set_proto_file_name(int index, const std::string& value);
  void set_proto_file_name(int index, std::string&& value);
  void set_proto_file_name(int index, const char* value);
  void set_proto_file_name(int index, const char* value, std::size_t size);
  void set_proto_file_name(int index, absl::string_view value);
  std::string* add_proto_file_name();
  void add_proto_file_name(const std::string& value);
  void add_proto_file_name(std::string&& value);
  void add_proto_file_name(const char* value);
  void add_proto_file_name(const char* value, std::size_t size);
  void add_proto_file_name(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proto_file_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proto_file_name();

  private:
  const std::string& _internal_proto_file_name(int index) const;
  std::string* _internal_add_proto_file_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_proto_file_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_proto_file_name();

  public:
  // .taotu.ErrorCode error = 1;
  void clear_error() ;
  ::taotu::ErrorCode error() const;
  void set_error(::taotu::ErrorCode value);

  private:
  ::taotu::ErrorCode _internal_error() const;
  void _internal_set_error(::taotu::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:taotu.GetServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proto_file_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proto_file_name_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class RpcService_Stub;
class RpcService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  RpcService() = default;

 public:
  using Stub = RpcService_Stub;

  RpcService(const RpcService&) = delete;
  RpcService& operator=(const RpcService&) = delete;
  virtual ~RpcService() = default;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ListRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::taotu::ListRpcRequest* request,
                        ::taotu::ListRpcResponse* response,
                        ::google::protobuf::Closure* done);
  virtual void GetService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::taotu::GetServiceRequest* request,
                        ::taotu::GetServiceResponse* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
      const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const override;

  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
      const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const override;
};

class RpcService_Stub final : public RpcService {
 public:
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);

  RpcService_Stub(const RpcService_Stub&) = delete;
  RpcService_Stub& operator=(const RpcService_Stub&) = delete;

  ~RpcService_Stub() override;

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RpcService ------------------------------------------
  void ListRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::taotu::ListRpcRequest* request,
                        ::taotu::ListRpcResponse* response,
                        ::google::protobuf::Closure* done) override;
  void GetService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::taotu::GetServiceRequest* request,
                        ::taotu::GetServiceResponse* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RpcMessage

// .taotu.MessageType type = 1;
inline void RpcMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::taotu::MessageType RpcMessage::type() const {
  // @@protoc_insertion_point(field_get:taotu.RpcMessage.type)
  return _internal_type();
}
inline void RpcMessage::set_type(::taotu::MessageType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:taotu.RpcMessage.type)
}
inline ::taotu::MessageType RpcMessage::_internal_type() const {
  return static_cast<::taotu::MessageType>(_impl_.type_);
}
inline void RpcMessage::_internal_set_type(::taotu::MessageType value) {
  ;
  _impl_.type_ = value;
}

// fixed64 id = 2;
inline void RpcMessage::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:taotu.RpcMessage.id)
  return _internal_id();
}
inline void RpcMessage::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:taotu.RpcMessage.id)
}
inline ::uint64_t RpcMessage::_internal_id() const {
  return _impl_.id_;
}
inline void RpcMessage::_internal_set_id(::uint64_t value) {
  ;
  _impl_.id_ = value;
}

// optional string service = 3;
inline bool RpcMessage::has_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RpcMessage::clear_service() {
  _impl_.service_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMessage::service() const {
  // @@protoc_insertion_point(field_get:taotu.RpcMessage.service)
  return _internal_service();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_service(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:taotu.RpcMessage.service)
}
inline std::string* RpcMessage::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:taotu.RpcMessage.service)
  return _s;
}
inline const std::string& RpcMessage::_internal_service() const {
  return _impl_.service_.Get();
}
inline void RpcMessage::_internal_set_service(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_service() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcMessage::release_service() {
  // @@protoc_insertion_point(field_release:taotu.RpcMessage.service)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMessage::set_allocated_service(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_.IsDefault()) {
          _impl_.service_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:taotu.RpcMessage.service)
}

// optional string method = 4;
inline bool RpcMessage::has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RpcMessage::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcMessage::method() const {
  // @@protoc_insertion_point(field_get:taotu.RpcMessage.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_method(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:taotu.RpcMessage.method)
}
inline std::string* RpcMessage::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:taotu.RpcMessage.method)
  return _s;
}
inline const std::string& RpcMessage::_internal_method() const {
  return _impl_.method_.Get();
}
inline void RpcMessage::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcMessage::release_method() {
  // @@protoc_insertion_point(field_release:taotu.RpcMessage.method)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.method_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMessage::set_allocated_method(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:taotu.RpcMessage.method)
}

// optional bytes request = 5;
inline bool RpcMessage::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RpcMessage::clear_request() {
  _impl_.request_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcMessage::request() const {
  // @@protoc_insertion_point(field_get:taotu.RpcMessage.request)
  return _internal_request();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_request(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.request_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:taotu.RpcMessage.request)
}
inline std::string* RpcMessage::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:taotu.RpcMessage.request)
  return _s;
}
inline const std::string& RpcMessage::_internal_request() const {
  return _impl_.request_.Get();
}
inline void RpcMessage::_internal_set_request(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.request_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_request() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.request_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcMessage::release_request() {
  // @@protoc_insertion_point(field_release:taotu.RpcMessage.request)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.request_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMessage::set_allocated_request(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.request_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_.IsDefault()) {
          _impl_.request_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:taotu.RpcMessage.request)
}

// optional bytes response = 6;
inline bool RpcMessage::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RpcMessage::clear_response() {
  _impl_.response_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RpcMessage::response() const {
  // @@protoc_insertion_point(field_get:taotu.RpcMessage.response)
  return _internal_response();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_response(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.response_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:taotu.RpcMessage.response)
}
inline std::string* RpcMessage::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:taotu.RpcMessage.response)
  return _s;
}
inline const std::string& RpcMessage::_internal_response() const {
  return _impl_.response_.Get();
}
inline void RpcMessage::_internal_set_response(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.response_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_response() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.response_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcMessage::release_response() {
  // @@protoc_insertion_point(field_release:taotu.RpcMessage.response)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.response_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMessage::set_allocated_response(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.response_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.response_.IsDefault()) {
          _impl_.response_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:taotu.RpcMessage.response)
}

// optional .taotu.ErrorCode error = 7;
inline bool RpcMessage::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RpcMessage::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::taotu::ErrorCode RpcMessage::error() const {
  // @@protoc_insertion_point(field_get:taotu.RpcMessage.error)
  return _internal_error();
}
inline void RpcMessage::set_error(::taotu::ErrorCode value) {
   _internal_set_error(value);
  // @@protoc_insertion_point(field_set:taotu.RpcMessage.error)
}
inline ::taotu::ErrorCode RpcMessage::_internal_error() const {
  return static_cast<::taotu::ErrorCode>(_impl_.error_);
}
inline void RpcMessage::_internal_set_error(::taotu::ErrorCode value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.error_ = value;
}

// -------------------------------------------------------------------

// ListRpcRequest

// optional string service_name = 1;
inline bool ListRpcRequest::has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ListRpcRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListRpcRequest::service_name() const {
  // @@protoc_insertion_point(field_get:taotu.ListRpcRequest.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListRpcRequest::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:taotu.ListRpcRequest.service_name)
}
inline std::string* ListRpcRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:taotu.ListRpcRequest.service_name)
  return _s;
}
inline const std::string& ListRpcRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void ListRpcRequest::_internal_set_service_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRpcRequest::_internal_mutable_service_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ListRpcRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:taotu.ListRpcRequest.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ListRpcRequest::set_allocated_service_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:taotu.ListRpcRequest.service_name)
}

// optional bool list_method = 2;
inline bool ListRpcRequest::has_list_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ListRpcRequest::clear_list_method() {
  _impl_.list_method_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ListRpcRequest::list_method() const {
  // @@protoc_insertion_point(field_get:taotu.ListRpcRequest.list_method)
  return _internal_list_method();
}
inline void ListRpcRequest::set_list_method(bool value) {
  _internal_set_list_method(value);
  // @@protoc_insertion_point(field_set:taotu.ListRpcRequest.list_method)
}
inline bool ListRpcRequest::_internal_list_method() const {
  return _impl_.list_method_;
}
inline void ListRpcRequest::_internal_set_list_method(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.list_method_ = value;
}

// -------------------------------------------------------------------

// ListRpcResponse

// .taotu.ErrorCode error = 1;
inline void ListRpcResponse::clear_error() {
  _impl_.error_ = 0;
}
inline ::taotu::ErrorCode ListRpcResponse::error() const {
  // @@protoc_insertion_point(field_get:taotu.ListRpcResponse.error)
  return _internal_error();
}
inline void ListRpcResponse::set_error(::taotu::ErrorCode value) {
   _internal_set_error(value);
  // @@protoc_insertion_point(field_set:taotu.ListRpcResponse.error)
}
inline ::taotu::ErrorCode ListRpcResponse::_internal_error() const {
  return static_cast<::taotu::ErrorCode>(_impl_.error_);
}
inline void ListRpcResponse::_internal_set_error(::taotu::ErrorCode value) {
  ;
  _impl_.error_ = value;
}

// repeated string service_name = 2;
inline int ListRpcResponse::_internal_service_name_size() const {
  return _impl_.service_name_.size();
}
inline int ListRpcResponse::service_name_size() const {
  return _internal_service_name_size();
}
inline void ListRpcResponse::clear_service_name() {
  _internal_mutable_service_name()->Clear();
}
inline std::string* ListRpcResponse::add_service_name() {
  std::string* _s = _internal_add_service_name();
  // @@protoc_insertion_point(field_add_mutable:taotu.ListRpcResponse.service_name)
  return _s;
}
inline const std::string& ListRpcResponse::service_name(int index) const {
  // @@protoc_insertion_point(field_get:taotu.ListRpcResponse.service_name)
  return _internal_service_name(index);
}
inline std::string* ListRpcResponse::mutable_service_name(int index) {
  // @@protoc_insertion_point(field_mutable:taotu.ListRpcResponse.service_name)
  return _internal_mutable_service_name()->Mutable(index);
}
inline void ListRpcResponse::set_service_name(int index, const std::string& value) {
  _internal_mutable_service_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, std::string&& value) {
  _internal_mutable_service_name()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_service_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_service_name()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, absl::string_view value) {
  _internal_mutable_service_name()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(const std::string& value) {
  _internal_mutable_service_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(std::string&& value) {
  _internal_mutable_service_name()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_service_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(const char* value, std::size_t size) {
  _internal_mutable_service_name()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:taotu.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(absl::string_view value) {
  _internal_mutable_service_name()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:taotu.ListRpcResponse.service_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRpcResponse::service_name() const {
  // @@protoc_insertion_point(field_list:taotu.ListRpcResponse.service_name)
  return _internal_service_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ListRpcResponse::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable_list:taotu.ListRpcResponse.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ListRpcResponse::_internal_service_name(int index) const {
  return _internal_service_name().Get(index);
}
inline std::string* ListRpcResponse::_internal_add_service_name() {
  return _internal_mutable_service_name()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRpcResponse::_internal_service_name() const {
  return _impl_.service_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListRpcResponse::_internal_mutable_service_name() {
  return &_impl_.service_name_;
}

// repeated string method_name = 3;
inline int ListRpcResponse::_internal_method_name_size() const {
  return _impl_.method_name_.size();
}
inline int ListRpcResponse::method_name_size() const {
  return _internal_method_name_size();
}
inline void ListRpcResponse::clear_method_name() {
  _internal_mutable_method_name()->Clear();
}
inline std::string* ListRpcResponse::add_method_name() {
  std::string* _s = _internal_add_method_name();
  // @@protoc_insertion_point(field_add_mutable:taotu.ListRpcResponse.method_name)
  return _s;
}
inline const std::string& ListRpcResponse::method_name(int index) const {
  // @@protoc_insertion_point(field_get:taotu.ListRpcResponse.method_name)
  return _internal_method_name(index);
}
inline std::string* ListRpcResponse::mutable_method_name(int index) {
  // @@protoc_insertion_point(field_mutable:taotu.ListRpcResponse.method_name)
  return _internal_mutable_method_name()->Mutable(index);
}
inline void ListRpcResponse::set_method_name(int index, const std::string& value) {
  _internal_mutable_method_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, std::string&& value) {
  _internal_mutable_method_name()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_method_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_method_name()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, absl::string_view value) {
  _internal_mutable_method_name()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(const std::string& value) {
  _internal_mutable_method_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(std::string&& value) {
  _internal_mutable_method_name()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_method_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(const char* value, std::size_t size) {
  _internal_mutable_method_name()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:taotu.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(absl::string_view value) {
  _internal_mutable_method_name()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:taotu.ListRpcResponse.method_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRpcResponse::method_name() const {
  // @@protoc_insertion_point(field_list:taotu.ListRpcResponse.method_name)
  return _internal_method_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ListRpcResponse::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable_list:taotu.ListRpcResponse.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& ListRpcResponse::_internal_method_name(int index) const {
  return _internal_method_name().Get(index);
}
inline std::string* ListRpcResponse::_internal_add_method_name() {
  return _internal_mutable_method_name()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRpcResponse::_internal_method_name() const {
  return _impl_.method_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListRpcResponse::_internal_mutable_method_name() {
  return &_impl_.method_name_;
}

// -------------------------------------------------------------------

// GetServiceRequest

// string service_name = 1;
inline void GetServiceRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& GetServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:taotu.GetServiceRequest.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetServiceRequest::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:taotu.GetServiceRequest.service_name)
}
inline std::string* GetServiceRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:taotu.GetServiceRequest.service_name)
  return _s;
}
inline const std::string& GetServiceRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void GetServiceRequest::_internal_set_service_name(const std::string& value) {
  ;


  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceRequest::_internal_mutable_service_name() {
  ;
  return _impl_.service_name_.Mutable( GetArenaForAllocation());
}
inline std::string* GetServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:taotu.GetServiceRequest.service_name)
  return _impl_.service_name_.Release();
}
inline void GetServiceRequest::set_allocated_service_name(std::string* value) {
  _impl_.service_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:taotu.GetServiceRequest.service_name)
}

// -------------------------------------------------------------------

// GetServiceResponse

// .taotu.ErrorCode error = 1;
inline void GetServiceResponse::clear_error() {
  _impl_.error_ = 0;
}
inline ::taotu::ErrorCode GetServiceResponse::error() const {
  // @@protoc_insertion_point(field_get:taotu.GetServiceResponse.error)
  return _internal_error();
}
inline void GetServiceResponse::set_error(::taotu::ErrorCode value) {
   _internal_set_error(value);
  // @@protoc_insertion_point(field_set:taotu.GetServiceResponse.error)
}
inline ::taotu::ErrorCode GetServiceResponse::_internal_error() const {
  return static_cast<::taotu::ErrorCode>(_impl_.error_);
}
inline void GetServiceResponse::_internal_set_error(::taotu::ErrorCode value) {
  ;
  _impl_.error_ = value;
}

// repeated string proto_file = 2;
inline int GetServiceResponse::_internal_proto_file_size() const {
  return _impl_.proto_file_.size();
}
inline int GetServiceResponse::proto_file_size() const {
  return _internal_proto_file_size();
}
inline void GetServiceResponse::clear_proto_file() {
  _internal_mutable_proto_file()->Clear();
}
inline std::string* GetServiceResponse::add_proto_file() {
  std::string* _s = _internal_add_proto_file();
  // @@protoc_insertion_point(field_add_mutable:taotu.GetServiceResponse.proto_file)
  return _s;
}
inline const std::string& GetServiceResponse::proto_file(int index) const {
  // @@protoc_insertion_point(field_get:taotu.GetServiceResponse.proto_file)
  return _internal_proto_file(index);
}
inline std::string* GetServiceResponse::mutable_proto_file(int index) {
  // @@protoc_insertion_point(field_mutable:taotu.GetServiceResponse.proto_file)
  return _internal_mutable_proto_file()->Mutable(index);
}
inline void GetServiceResponse::set_proto_file(int index, const std::string& value) {
  _internal_mutable_proto_file()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::set_proto_file(int index, std::string&& value) {
  _internal_mutable_proto_file()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::set_proto_file(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_proto_file()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::set_proto_file(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_proto_file()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::set_proto_file(int index, absl::string_view value) {
  _internal_mutable_proto_file()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::add_proto_file(const std::string& value) {
  _internal_mutable_proto_file()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::add_proto_file(std::string&& value) {
  _internal_mutable_proto_file()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::add_proto_file(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_proto_file()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::add_proto_file(const char* value, std::size_t size) {
  _internal_mutable_proto_file()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:taotu.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::add_proto_file(absl::string_view value) {
  _internal_mutable_proto_file()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:taotu.GetServiceResponse.proto_file)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServiceResponse::proto_file() const {
  // @@protoc_insertion_point(field_list:taotu.GetServiceResponse.proto_file)
  return _internal_proto_file();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GetServiceResponse::mutable_proto_file() {
  // @@protoc_insertion_point(field_mutable_list:taotu.GetServiceResponse.proto_file)
  return _internal_mutable_proto_file();
}
inline const std::string& GetServiceResponse::_internal_proto_file(int index) const {
  return _internal_proto_file().Get(index);
}
inline std::string* GetServiceResponse::_internal_add_proto_file() {
  return _internal_mutable_proto_file()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServiceResponse::_internal_proto_file() const {
  return _impl_.proto_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServiceResponse::_internal_mutable_proto_file() {
  return &_impl_.proto_file_;
}

// repeated string proto_file_name = 3;
inline int GetServiceResponse::_internal_proto_file_name_size() const {
  return _impl_.proto_file_name_.size();
}
inline int GetServiceResponse::proto_file_name_size() const {
  return _internal_proto_file_name_size();
}
inline void GetServiceResponse::clear_proto_file_name() {
  _internal_mutable_proto_file_name()->Clear();
}
inline std::string* GetServiceResponse::add_proto_file_name() {
  std::string* _s = _internal_add_proto_file_name();
  // @@protoc_insertion_point(field_add_mutable:taotu.GetServiceResponse.proto_file_name)
  return _s;
}
inline const std::string& GetServiceResponse::proto_file_name(int index) const {
  // @@protoc_insertion_point(field_get:taotu.GetServiceResponse.proto_file_name)
  return _internal_proto_file_name(index);
}
inline std::string* GetServiceResponse::mutable_proto_file_name(int index) {
  // @@protoc_insertion_point(field_mutable:taotu.GetServiceResponse.proto_file_name)
  return _internal_mutable_proto_file_name()->Mutable(index);
}
inline void GetServiceResponse::set_proto_file_name(int index, const std::string& value) {
  _internal_mutable_proto_file_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::set_proto_file_name(int index, std::string&& value) {
  _internal_mutable_proto_file_name()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::set_proto_file_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_proto_file_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::set_proto_file_name(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_proto_file_name()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::set_proto_file_name(int index, absl::string_view value) {
  _internal_mutable_proto_file_name()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::add_proto_file_name(const std::string& value) {
  _internal_mutable_proto_file_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::add_proto_file_name(std::string&& value) {
  _internal_mutable_proto_file_name()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::add_proto_file_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_proto_file_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::add_proto_file_name(const char* value, std::size_t size) {
  _internal_mutable_proto_file_name()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:taotu.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::add_proto_file_name(absl::string_view value) {
  _internal_mutable_proto_file_name()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:taotu.GetServiceResponse.proto_file_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServiceResponse::proto_file_name() const {
  // @@protoc_insertion_point(field_list:taotu.GetServiceResponse.proto_file_name)
  return _internal_proto_file_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GetServiceResponse::mutable_proto_file_name() {
  // @@protoc_insertion_point(field_mutable_list:taotu.GetServiceResponse.proto_file_name)
  return _internal_mutable_proto_file_name();
}
inline const std::string& GetServiceResponse::_internal_proto_file_name(int index) const {
  return _internal_proto_file_name().Get(index);
}
inline std::string* GetServiceResponse::_internal_add_proto_file_name() {
  return _internal_mutable_proto_file_name()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServiceResponse::_internal_proto_file_name() const {
  return _impl_.proto_file_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServiceResponse::_internal_mutable_proto_file_name() {
  return &_impl_.proto_file_name_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace taotu


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::taotu::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::taotu::MessageType>() {
  return ::taotu::MessageType_descriptor();
}
template <>
struct is_proto_enum<::taotu::ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::taotu::ErrorCode>() {
  return ::taotu::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto_2epb_2eh
