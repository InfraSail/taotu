// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace taotu {
template <typename>
PROTOBUF_CONSTEXPR RpcMessage::RpcMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.method_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.request_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.response_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.error_)*/ 0
} {}
struct RpcMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMessageDefaultTypeInternal() {}
  union {
    RpcMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListRpcRequest::ListRpcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.list_method_)*/ false
} {}
struct ListRpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRpcRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRpcRequestDefaultTypeInternal() {}
  union {
    ListRpcRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRpcRequestDefaultTypeInternal _ListRpcRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListRpcResponse::ListRpcResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{}
  , /*decltype(_impl_.method_name_)*/{}
  , /*decltype(_impl_.error_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListRpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRpcResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRpcResponseDefaultTypeInternal() {}
  union {
    ListRpcResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRpcResponseDefaultTypeInternal _ListRpcResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetServiceRequest::GetServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceRequestDefaultTypeInternal() {}
  union {
    GetServiceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetServiceResponse::GetServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proto_file_)*/{}
  , /*decltype(_impl_.proto_file_name_)*/{}
  , /*decltype(_impl_.error_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceResponseDefaultTypeInternal() {}
  union {
    GetServiceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceResponseDefaultTypeInternal _GetServiceResponse_default_instance_;
}  // namespace taotu
static ::_pb::Metadata file_level_metadata_rpc_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rpc_2eproto[2];
static const ::_pb::ServiceDescriptor*
    file_level_service_descriptors_rpc_2eproto[1];
const ::uint32_t TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_.service_),
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_.request_),
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::taotu::RpcMessage, _impl_.error_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcRequest, _impl_.service_name_),
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcRequest, _impl_.list_method_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcResponse, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcResponse, _impl_.service_name_),
    PROTOBUF_FIELD_OFFSET(::taotu::ListRpcResponse, _impl_.method_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::taotu::GetServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taotu::GetServiceRequest, _impl_.service_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::taotu::GetServiceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::taotu::GetServiceResponse, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::taotu::GetServiceResponse, _impl_.proto_file_),
    PROTOBUF_FIELD_OFFSET(::taotu::GetServiceResponse, _impl_.proto_file_name_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::taotu::RpcMessage)},
        { 22, 32, -1, sizeof(::taotu::ListRpcRequest)},
        { 34, -1, -1, sizeof(::taotu::ListRpcResponse)},
        { 45, -1, -1, sizeof(::taotu::GetServiceRequest)},
        { 54, -1, -1, sizeof(::taotu::GetServiceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::taotu::_RpcMessage_default_instance_._instance,
    &::taotu::_ListRpcRequest_default_instance_._instance,
    &::taotu::_ListRpcResponse_default_instance_._instance,
    &::taotu::_GetServiceRequest_default_instance_._instance,
    &::taotu::_GetServiceResponse_default_instance_._instance,
};
const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\trpc.proto\022\005taotu\"\362\001\n\nRpcMessage\022 \n\004typ"
    "e\030\001 \001(\0162\022.taotu.MessageType\022\n\n\002id\030\002 \001(\006\022"
    "\024\n\007service\030\003 \001(\tH\000\210\001\001\022\023\n\006method\030\004 \001(\tH\001\210"
    "\001\001\022\024\n\007request\030\005 \001(\014H\002\210\001\001\022\025\n\010response\030\006 \001"
    "(\014H\003\210\001\001\022$\n\005error\030\007 \001(\0162\020.taotu.ErrorCode"
    "H\004\210\001\001B\n\n\010_serviceB\t\n\007_methodB\n\n\010_request"
    "B\013\n\t_responseB\010\n\006_error\"f\n\016ListRpcReques"
    "t\022\031\n\014service_name\030\001 \001(\tH\000\210\001\001\022\030\n\013list_met"
    "hod\030\002 \001(\010H\001\210\001\001B\017\n\r_service_nameB\016\n\014_list"
    "_method\"]\n\017ListRpcResponse\022\037\n\005error\030\001 \001("
    "\0162\020.taotu.ErrorCode\022\024\n\014service_name\030\002 \003("
    "\t\022\023\n\013method_name\030\003 \003(\t\")\n\021GetServiceRequ"
    "est\022\024\n\014service_name\030\001 \001(\t\"b\n\022GetServiceR"
    "esponse\022\037\n\005error\030\001 \001(\0162\020.taotu.ErrorCode"
    "\022\022\n\nproto_file\030\002 \003(\t\022\027\n\017proto_file_name\030"
    "\003 \003(\t*>\n\013MessageType\022\t\n\005OTHER\020\000\022\013\n\007REQUE"
    "ST\020\001\022\014\n\010RESPONSE\020\002\022\t\n\005ERROR\020\003*\201\001\n\tErrorC"
    "ode\022\014\n\010NO_ERROR\020\000\022\017\n\013WRONG_PROTO\020\001\022\016\n\nNO"
    "_SERVICE\020\002\022\r\n\tNO_METHOD\020\003\022\023\n\017INVALID_REQ"
    "UEST\020\004\022\024\n\020INVALID_RESPONSE\020\005\022\013\n\007TIMEOUT\020"
    "\0062\211\001\n\nRpcService\0228\n\007ListRpc\022\025.taotu.List"
    "RpcRequest\032\026.taotu.ListRpcResponse\022A\n\nGe"
    "tService\022\030.taotu.GetServiceRequest\032\031.tao"
    "tu.GetServiceResponseB\t\200\001\001\210\001\001\220\001\001b\006proto3"
};
static ::absl::once_flag descriptor_table_rpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_2eproto = {
    false,
    false,
    960,
    descriptor_table_protodef_rpc_2eproto,
    "rpc.proto",
    &descriptor_table_rpc_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_rpc_2eproto::offsets,
    file_level_metadata_rpc_2eproto,
    file_level_enum_descriptors_rpc_2eproto,
    file_level_service_descriptors_rpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_2eproto_getter() {
  return &descriptor_table_rpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_2eproto(&descriptor_table_rpc_2eproto);
namespace taotu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class RpcMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_._has_bits_);
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RpcMessage::RpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taotu.RpcMessage)
}
RpcMessage::RpcMessage(const RpcMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_) {}

    , decltype(_impl_.method_) {}

    , decltype(_impl_.request_) {}

    , decltype(_impl_.response_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.error_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.service_.Set(from._internal_service(), _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.method_.Set(from._internal_method(), _this->GetArenaForAllocation());
  }
  _impl_.request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.request_.Set(from._internal_request(), _this->GetArenaForAllocation());
  }
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.response_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.response_.Set(from._internal_response(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:taotu.RpcMessage)
}

inline void RpcMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_) {}

    , decltype(_impl_.method_) {}

    , decltype(_impl_.request_) {}

    , decltype(_impl_.response_) {}

    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.error_) { 0 }

  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.response_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcMessage::~RpcMessage() {
  // @@protoc_insertion_point(destructor:taotu.RpcMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.Destroy();
  _impl_.method_.Destroy();
  _impl_.request_.Destroy();
  _impl_.response_.Destroy();
}

void RpcMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:taotu.RpcMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.service_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.request_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.response_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _impl_.error_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .taotu.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::taotu::MessageType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // fixed64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taotu.RpcMessage.service"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taotu.RpcMessage.method"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .taotu.ErrorCode error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::taotu::ErrorCode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RpcMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taotu.RpcMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .taotu.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // fixed64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string service = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_service();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.RpcMessage.service");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string method = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_method();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.RpcMessage.method");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bytes request = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_request();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // optional bytes response = 6;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_response();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional .taotu.ErrorCode error = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taotu.RpcMessage)
  return target;
}

::size_t RpcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taotu.RpcMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string service = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_service());
    }

    // optional string method = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_method());
    }

    // optional bytes request = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_request());
    }

    // optional bytes response = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_response());
    }

  }
  // fixed64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += 9;
  }

  // .taotu.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // optional .taotu.ErrorCode error = 7;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMessage::GetClassData() const { return &_class_data_; }


void RpcMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcMessage*>(&to_msg);
  auto& from = static_cast<const RpcMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taotu.RpcMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_service(from._internal_service());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_request(from._internal_request());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_response(from._internal_response());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (cached_has_bits & 0x00000010u) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taotu.RpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage::IsInitialized() const {
  return true;
}

void RpcMessage::InternalSwap(RpcMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_, lhs_arena,
                                       &other->_impl_.service_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, lhs_arena,
                                       &other->_impl_.method_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_, lhs_arena,
                                       &other->_impl_.request_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.response_, lhs_arena,
                                       &other->_impl_.response_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.error_)
      + sizeof(RpcMessage::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[0]);
}
// ===================================================================

class ListRpcRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListRpcRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ListRpcRequest, _impl_._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_list_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ListRpcRequest::ListRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taotu.ListRpcRequest)
}
ListRpcRequest::ListRpcRequest(const ListRpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRpcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_name_) {}

    , decltype(_impl_.list_method_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.list_method_ = from._impl_.list_method_;
  // @@protoc_insertion_point(copy_constructor:taotu.ListRpcRequest)
}

inline void ListRpcRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_name_) {}

    , decltype(_impl_.list_method_) { false }

  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListRpcRequest::~ListRpcRequest() {
  // @@protoc_insertion_point(destructor:taotu.ListRpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRpcRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
}

void ListRpcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:taotu.ListRpcRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.service_name_.ClearNonDefaultToEmpty();
  }
  _impl_.list_method_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taotu.ListRpcRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool list_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_list_method(&has_bits);
          _impl_.list_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListRpcRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taotu.ListRpcRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_service_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.ListRpcRequest.service_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool list_method = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_list_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taotu.ListRpcRequest)
  return target;
}

::size_t ListRpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taotu.ListRpcRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string service_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_service_name());
    }

    // optional bool list_method = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRpcRequest::GetClassData() const { return &_class_data_; }


void ListRpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRpcRequest*>(&to_msg);
  auto& from = static_cast<const ListRpcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taotu.ListRpcRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_service_name(from._internal_service_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.list_method_ = from._impl_.list_method_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRpcRequest::CopyFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taotu.ListRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcRequest::IsInitialized() const {
  return true;
}

void ListRpcRequest::InternalSwap(ListRpcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_name_, lhs_arena,
                                       &other->_impl_.service_name_, rhs_arena);

  swap(_impl_.list_method_, other->_impl_.list_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[1]);
}
// ===================================================================

class ListRpcResponse::_Internal {
 public:
};

ListRpcResponse::ListRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taotu.ListRpcResponse)
}
ListRpcResponse::ListRpcResponse(const ListRpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRpcResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){from._impl_.service_name_}
    , decltype(_impl_.method_name_){from._impl_.method_name_}
    , decltype(_impl_.error_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:taotu.ListRpcResponse)
}

inline void ListRpcResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){arena}
    , decltype(_impl_.method_name_){arena}
    , decltype(_impl_.error_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListRpcResponse::~ListRpcResponse() {
  // @@protoc_insertion_point(destructor:taotu.ListRpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRpcResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_service_name()->~RepeatedPtrField();
  _internal_mutable_method_name()->~RepeatedPtrField();
}

void ListRpcResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:taotu.ListRpcResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_service_name()->Clear();
  _internal_mutable_method_name()->Clear();
  _impl_.error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .taotu.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::taotu::ErrorCode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "taotu.ListRpcResponse.service_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_method_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "taotu.ListRpcResponse.method_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListRpcResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taotu.ListRpcResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .taotu.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_error(), target);
  }

  // repeated string service_name = 2;
  for (int i = 0, n = this->_internal_service_name_size(); i < n; ++i) {
    const auto& s = this->_internal_service_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.ListRpcResponse.service_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string method_name = 3;
  for (int i = 0, n = this->_internal_method_name_size(); i < n; ++i) {
    const auto& s = this->_internal_method_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.ListRpcResponse.method_name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taotu.ListRpcResponse)
  return target;
}

::size_t ListRpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taotu.ListRpcResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_name = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_service_name().size());
  for (int i = 0, n = _internal_service_name().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_service_name().Get(i));
  }

  // repeated string method_name = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_method_name().size());
  for (int i = 0, n = _internal_method_name().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_method_name().Get(i));
  }

  // .taotu.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRpcResponse::GetClassData() const { return &_class_data_; }


void ListRpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRpcResponse*>(&to_msg);
  auto& from = static_cast<const ListRpcResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taotu.ListRpcResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_service_name()->MergeFrom(from._internal_service_name());
  _this->_internal_mutable_method_name()->MergeFrom(from._internal_method_name());
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRpcResponse::CopyFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taotu.ListRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcResponse::IsInitialized() const {
  return true;
}

void ListRpcResponse::InternalSwap(ListRpcResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_service_name()->InternalSwap(
      other->_internal_mutable_service_name());
  _internal_mutable_method_name()->InternalSwap(
      other->_internal_mutable_method_name());
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[2]);
}
// ===================================================================

class GetServiceRequest::_Internal {
 public:
};

GetServiceRequest::GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taotu.GetServiceRequest)
}
GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:taotu.GetServiceRequest)
}

inline void GetServiceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:taotu.GetServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
}

void GetServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:taotu.GetServiceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taotu.GetServiceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServiceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taotu.GetServiceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    const std::string& _s = this->_internal_service_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.GetServiceRequest.service_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taotu.GetServiceRequest)
  return target;
}

::size_t GetServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taotu.GetServiceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_service_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceRequest::GetClassData() const { return &_class_data_; }


void GetServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceRequest*>(&to_msg);
  auto& from = static_cast<const GetServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taotu.GetServiceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taotu.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  return true;
}

void GetServiceRequest::InternalSwap(GetServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_name_, lhs_arena,
                                       &other->_impl_.service_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[3]);
}
// ===================================================================

class GetServiceResponse::_Internal {
 public:
};

GetServiceResponse::GetServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:taotu.GetServiceResponse)
}
GetServiceResponse::GetServiceResponse(const GetServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_file_){from._impl_.proto_file_}
    , decltype(_impl_.proto_file_name_){from._impl_.proto_file_name_}
    , decltype(_impl_.error_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:taotu.GetServiceResponse)
}

inline void GetServiceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_file_){arena}
    , decltype(_impl_.proto_file_name_){arena}
    , decltype(_impl_.error_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServiceResponse::~GetServiceResponse() {
  // @@protoc_insertion_point(destructor:taotu.GetServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proto_file()->~RepeatedPtrField();
  _internal_mutable_proto_file_name()->~RepeatedPtrField();
}

void GetServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:taotu.GetServiceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proto_file()->Clear();
  _internal_mutable_proto_file_name()->Clear();
  _impl_.error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .taotu.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::taotu::ErrorCode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string proto_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proto_file();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "taotu.GetServiceResponse.proto_file"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string proto_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proto_file_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "taotu.GetServiceResponse.proto_file_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServiceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taotu.GetServiceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .taotu.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_error(), target);
  }

  // repeated string proto_file = 2;
  for (int i = 0, n = this->_internal_proto_file_size(); i < n; ++i) {
    const auto& s = this->_internal_proto_file(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.GetServiceResponse.proto_file");
    target = stream->WriteString(2, s, target);
  }

  // repeated string proto_file_name = 3;
  for (int i = 0, n = this->_internal_proto_file_name_size(); i < n; ++i) {
    const auto& s = this->_internal_proto_file_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "taotu.GetServiceResponse.proto_file_name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taotu.GetServiceResponse)
  return target;
}

::size_t GetServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taotu.GetServiceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proto_file = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_proto_file().size());
  for (int i = 0, n = _internal_proto_file().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_proto_file().Get(i));
  }

  // repeated string proto_file_name = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_proto_file_name().size());
  for (int i = 0, n = _internal_proto_file_name().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_proto_file_name().Get(i));
  }

  // .taotu.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceResponse::GetClassData() const { return &_class_data_; }


void GetServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceResponse*>(&to_msg);
  auto& from = static_cast<const GetServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taotu.GetServiceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proto_file()->MergeFrom(from._internal_proto_file());
  _this->_internal_mutable_proto_file_name()->MergeFrom(from._internal_proto_file_name());
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceResponse::CopyFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taotu.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceResponse::IsInitialized() const {
  return true;
}

void GetServiceResponse::InternalSwap(GetServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_proto_file()->InternalSwap(
      other->_internal_mutable_proto_file());
  _internal_mutable_proto_file_name()->InternalSwap(
      other->_internal_mutable_proto_file_name());
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[4]);
}
// ===================================================================

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_service_descriptors_rpc_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::GetDescriptor() {
  return descriptor();
}

void RpcService::ListRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::taotu::ListRpcRequest*, ::taotu::ListRpcResponse*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ListRpc() not implemented.");
  done->Run();
}
void RpcService::GetService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::taotu::GetServiceRequest*, ::taotu::GetServiceResponse*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetService() not implemented.");
  done->Run();
}

void RpcService::CallMethod(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::PROTOBUF_NAMESPACE_ID::Message* request,
    ::PROTOBUF_NAMESPACE_ID::Message* response, ::google::protobuf::Closure* done) {
  ABSL_DCHECK_EQ(method->service(), file_level_service_descriptors_rpc_2eproto[0]);
  switch (method->index()) {
    case 0:
      ListRpc(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::taotu::ListRpcRequest*>(request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::taotu::ListRpcResponse*>(response), done);
      break;
    case 1:
      GetService(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::taotu::GetServiceRequest*>(request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::taotu::GetServiceResponse*>(response), done);
      break;

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  ABSL_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::taotu::ListRpcRequest::default_instance();
    case 1:
      return ::taotu::GetServiceRequest::default_instance();

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                  ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  ABSL_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::taotu::ListRpcResponse::default_instance();
    case 1:
      return ::taotu::GetServiceResponse::default_instance();

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                  ->GetPrototype(method->output_type());
  }
}

RpcService_Stub::RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
    : channel_(channel), owns_channel_(false) {}

RpcService_Stub::RpcService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership ==
                    ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}

RpcService_Stub::~RpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_Stub::ListRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::taotu::ListRpcRequest* request,
                              ::taotu::ListRpcResponse* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0), controller,
                       request, response, done);
}
void RpcService_Stub::GetService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::taotu::GetServiceRequest* request,
                              ::taotu::GetServiceResponse* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1), controller,
                       request, response, done);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace taotu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::taotu::RpcMessage*
Arena::CreateMaybeMessage< ::taotu::RpcMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taotu::RpcMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::taotu::ListRpcRequest*
Arena::CreateMaybeMessage< ::taotu::ListRpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taotu::ListRpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::taotu::ListRpcResponse*
Arena::CreateMaybeMessage< ::taotu::ListRpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taotu::ListRpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::taotu::GetServiceRequest*
Arena::CreateMaybeMessage< ::taotu::GetServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taotu::GetServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::taotu::GetServiceResponse*
Arena::CreateMaybeMessage< ::taotu::GetServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taotu::GetServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
